# -*- coding: utf-8 -*-
"""
Created on Sat Nov 24 18:54:18 2018

@author: Tony Zhu
"""
"""
The Wilberforce pendulum consists of a mass suspended by a long spring. 
The mass is free to turn about its vertical axis as well as oscillate up and down. 
It oscillates vertically and torsionally. 

Let z represent the vertical position of the mass m and θ be angle of rotation of the mass
Write a program using odeint to solve the system of ODEs and plot z and θ on the same graph. 
Let m = 0.5 kg, I = 1.0 × 10-4 kg m2, k = 5 N/m, κ = 1.0 × 10-3 N m, and α = 1.0 × 10-2 N. 
Show that for these particular values of the constants the motion periodically alternates between being purely vertical and purely torsional. 
"""
#import libraries
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

#specify constants
kappa=0.001    
k=5
alpha=0.01
m=0.5
I=0.0001

## set initial conditions and parameters
vz0 = 1  # set speed
vtheta0=0
z0=0            # specify initial conditions
theta0=0

## define function to compute f(X,t)
def f_func(state,time):
    f = np.zeros(4)    # create array to hold f vector
    f[0] = state[2] # f[0] = z component of velocity
    f[1] = state[3] # f[1] = theta component of velocity
    f[2] = -kappa*state[0]/I-0.5*alpha*state[1]/I       # f[2] = acceleration in z direction
    f[3] = -k*state[1]/m-0.5*alpha*state[0]/m       # f[3] = acceleration in theta direction
    return f

## set initial state vector and time array
X0 = [ theta0, z0, vtheta0, vz0]        # set initial state of the system
t0 = 0.
tf_str = input("Enter final time: ")
tau_str = input("Enter time step: ")
tf = float(tf_str)
tau = float(tau_str)

# create time array starting at t0, ending at tf with a spacing tau
t = np.arange(t0,tf,tau)

## solve ODE using odeint
X = odeint(f_func,X0,t) # returns an 2-dimensional array with the
                        # first index specifying the time and the
                        # second index specifying the component of
                        # the state vector

# putting ':' as an index specifies all of the elements for
# that index so z, theta, vz, and vtheta are arrays at times specified
# in the time array
theta = X[:,0]
z = X[:,1]
vtheta = X[:,2]
vz = X[:,3]

# plot the z and theta motion versus time, respectively, on the same graph.
plt.figure(1)
plt.clf()
plt.plot(t,z*20,'r+',label="z motion")#note: I multiplied z-displacement by 20 so we can see better
plt.plot(t,theta,'k-',label="theta motion")
plt.xlabel('time(s)')
plt.ylabel('motion(m)')
plt.title("motion versus time")
plt.axis([0,tf,-30,30])
plt.legend()
plt.show()
